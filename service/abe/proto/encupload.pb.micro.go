// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: abe.proto

package go_micro_service_encupload

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for EncUploadService service

func NewEncUploadServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for EncUploadService service

type EncUploadService interface {
	// 获取 ABE(key)
	AbEncryption(ctx context.Context, in *ReqAccessPolicy, opts ...client.CallOption) (*RespKey, error)
}

type encUploadService struct {
	c    client.Client
	name string
}

func NewEncUploadService(name string, c client.Client) EncUploadService {
	return &encUploadService{
		c:    c,
		name: name,
	}
}

func (c *encUploadService) AbEncryption(ctx context.Context, in *ReqAccessPolicy, opts ...client.CallOption) (*RespKey, error) {
	req := c.c.NewRequest(c.name, "EncUploadService.AbEncryption", in)
	out := new(RespKey)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for EncUploadService service

type EncUploadServiceHandler interface {
	// 获取 ABE(key)
	AbEncryption(context.Context, *ReqAccessPolicy, *RespKey) error
}

func RegisterEncUploadServiceHandler(s server.Server, hdlr EncUploadServiceHandler, opts ...server.HandlerOption) error {
	type encUploadService interface {
		AbEncryption(ctx context.Context, in *ReqAccessPolicy, out *RespKey) error
	}
	type EncUploadService struct {
		encUploadService
	}
	h := &encUploadServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&EncUploadService{h}, opts...))
}

type encUploadServiceHandler struct {
	EncUploadServiceHandler
}

func (h *encUploadServiceHandler) AbEncryption(ctx context.Context, in *ReqAccessPolicy, out *RespKey) error {
	return h.EncUploadServiceHandler.AbEncryption(ctx, in, out)
}
